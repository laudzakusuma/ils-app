version: '3.8'

services:
  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://ils_user:ils_password@postgres:5432/ils_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - APPLE_HEALTH_API_KEY=${APPLE_HEALTH_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - [cite_start]./models:/app/models # [cite: 3]
      - ./uploads:/app/uploads
    networks:
      - ils-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ils_db
      POSTGRES_USER: ils_user
      POSTGRES_PASSWORD: ils_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ils-network

  # Redis Cache
  redis:
    [cite_start]image: redis:7-alpine # [cite: 4]
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ils-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
    depends_on:
      - [cite_start]app # [cite: 5]
    networks:
      - ils-network

  # AI Model Server (Python)
  ai-server:
    build:
      context: ./ai-server
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - MODEL_PATH=/app/models
    volumes:
      - ./ai-server/models:/app/models
      - ./ai-server/data:/app/data
    networks:
      - [cite_start]ils-network # [cite: 6]

  # WebSocket Server
  websocket:
    build:
      context: ./websocket-server
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis
    networks:
      - ils-network

volumes:
  postgres_data:
  redis_data:

networks:
  ils-network:
    driver: bridge